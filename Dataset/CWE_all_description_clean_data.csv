one system settings configuration element externally control user allow external control system setting disrupt service cause application behave unexpected potentially malicious way
software use external input construct pathname within restrict directory properly neutralize sequence resolve location outside directory allow attacker traverse file system access file directory outside restrict directory
software use external input construct pathname within restrict directory properly neutralize absolute path sequence abs path resolve location outside directory allow attacker traverse file system access file directory outside restrict directory
system application vulnerable file system content disclosure path equivalence path equivalence involve use special character file directory name associate manipulation intend generate multiple name object path equivalence usually employ order circumvent access control express use incomplete set file name file path representation different path traversal wherein manipulation perform generate name different object
software attempt access file base filename properly prevent filename identify link shortcut resolve unintended resource
product handle incorrectly handle file name identifies virtual resource directly specify within directory associate file name cause product perform file base operation resource file virtual file name represent like normal file name effectively aliases resource behave like normal file depend functionality could alternate entity necessarily list directory
software allow user input control influence path file name use filesystem operation could allow attacker access modify system file file critical application path manipulation error occur follow two condition meet attacker specify path use operation filesystem specify resource attacker gain capability would otherwise permitted example program may give attacker ability overwrite specify file run configuration control attacker
software properly neutralize certain special element improperly neutralize equivalent special element software may fix list special character believe complete however may alternate encoding representation also mean example software may filter lead slash prevent absolute path name account tilde follow user name nix system could expand absolute pathname alternately software might filter dangerous e command line switch call external program might account exec switch semantics
software construct part os command use externally influence input upstream component neutralize incorrectly neutralize special element could modify intend os command send downstream component could allow attacker execute unexpected dangerous command directly operate system weakness lead vulnerability environment attacker direct access operate system web application alternately weakness occur privilege program could allow attacker specify command normally would accessible call alternate command privilege attacker problem exacerbate compromise process follow principle least privilege attacker control command may run special system privilege increase amount damage least two subtypes o command injection application intend execute single fix program control intend use externally supply input argument program example program might use system nslookup hostname run nslookup allow user supply hostname use argument attacker cannot prevent nslookup execute however program remove command separator hostname argument attacker could place separator argument allow execute program nslookup finish execute application accepts input use fully select program run well command use application simply redirect entire command operate system example program might use exec command execute command supply user command attacker control attacker execute arbitrary command program command execute use function like exec createprocess attacker might able combine multiple command together line weakness standpoint variant represent distinct programmer error first variant programmer clearly intend input untrusted party part argument command execute second variant programmer intend command accessible untrusted party programmer probably account alternate way malicious attacker provide input
software neutralize incorrectly neutralize user controllable input place output use web page serve user cross site script xss vulnerability occur untrusted data enters web application typically web request web application dynamically generate web page contain untrusted data page generation application prevent data contain content executable web browser javascript html tag html attribute mouse event flash activex etc victim visit generate web page web browser contain malicious script inject use untrusted data since script come web page send web server victim web browser execute malicious script context web server domain effectively violate intention web browser origin policy state script one domain able access resource run code different domain three main kind xss type reflect xss non persistent server read data directly http request reflect back http response reflect xss exploit occur attacker cause victim supply dangerous content vulnerable web application reflect back victim execute web browser common mechanism deliver malicious content include parameter url post publicly e mail directly victim url construct manner constitute core many phishing scheme whereby attacker convinces victim visit url refers vulnerable site site reflect attacker content back victim content execute victim browser type store xss persistent application store dangerous data database message forum visitor log trust data store later time dangerous data subsequently read back application include dynamic content attacker perspective optimal place inject malicious content area display either many user particularly interest user interest user typically elevate privilege application interact sensitive data valuable attacker one user execute malicious content attacker may able perform privilege operation behalf user gain access sensitive data belong user example attacker might inject xss log message might handle properly administrator view log type dom base xss dom base xss client performs injection xss page type server performs injection dom base xss generally involve server control trust script send client javascript performs sanity check form user submits server supply script process user supply data injects back web page dynamic html dom base xss possible malicious script inject attacker perform variety malicious activity attacker could transfer private information cooky may include session information victim machine attacker attacker could send malicious request web site behalf victim could especially dangerous site victim administrator privilege manage site phishing attack could use emulate trust web sit trick victim enter password allow attacker compromise victim account web site finally script could exploit vulnerability web browser possibly take victim machine sometimes refer drive hack many case attack launch without victim even aware even careful user attacker frequently use variety method encode malicious portion attack url encode unicode request look le suspicious
software construct string command execute separate component another control sphere properly delimit intend argument option switch within command string create command use interpolation string developer may assume argument option specify process assumption may even stronger programmer encode command way prevent separate command provide maliciously e g case shell metacharacters construct command developer may use whitespace delimiters require separate argument command however attacker provide untrusted input contain argument separate delimiters result command argument intend developer attacker may able change behavior command depend functionality support extraneous argument may security relevant consequence
software construct part sql command use externally influence input upstream component neutralize incorrectly neutralize special element could modify intend sql command send downstream component without sufficient removal quote sql syntax user controllable input generate sql query cause input interpret sql instead ordinary user data use alter query logic bypass security check insert additional statement modify back end database possibly include execution system command sql injection become common issue database drive web sit flaw easily detect easily exploit site software package even minimal user base likely subject attempt attack kind flaw depend fact sql make real distinction control data plane
software construct part ldap query use externally influence input upstream component neutralize incorrectly neutralize special element could modify intend ldap query send downstream component
software properly neutralize special element use xml allow attacker modify syntax content command xml process end system within xml special element could include reserved word character could use add new data modify xml syntax
software use crlf carriage return line feed special element e g separate line record neutralize incorrectly neutralize crlf sequence input
software construct part code segment use externally influence input upstream component neutralize incorrectly neutralize special element could modify syntax behavior intend code segment software allow user input contain code syntax might possible attacker craft code way alter intend control flow software alteration could lead arbitrary code execution injection problem encompass wide variety issue mitigate different way reason effective way discus weaknesses note distinct feature classify injection weaknesses important issue note injection problem share one thing common e allow injection control plane data user control data plane mean execution process may alter send code legitimate data channel use mechanism buffer overflow many flaw involve use issue gain execution injection problem need data parse classic instantiation category weakness sql injection format string vulnerability
software receive input upstream component neutralize incorrectly neutralize code syntax insert input executable resource library configuration file template
software accept xml untrusted source validate xml proper schema successful attack begin violation programmer assumption accept xml document without validate dtd xml schema programmer leave door open attacker provide unexpected unreasonable malicious input
software misinterprets input whether attacker another product security relevant fashion
software neutralize incorrectly neutralize output write log allow attacker forge log entries inject malicious content log log forge vulnerability occur data enters application untrusted source data write application system log file
program copy input buffer output buffer without verify size input buffer le size output buffer lead buffer overflow buffer overflow condition exist program attempt put data buffer hold program attempt put data memory area outside boundary buffer simplest type error common cause buffer overflow classic case program copy buffer without restrict much copy variant exist existence classic overflow strongly suggest programmer consider even basic security protection
condition attacker ability write arbitrary value arbitrary location often result buffer overflow
software write buffer use index pointer reference memory location prior begin buffer typically occur pointer index decremented position buffer pointer arithmetic result position begin valid memory location negative index use
software read data past end begin intend buffer typically allow attacker read sensitive information memory location cause crash crash occur code read variable amount data assume sentinel exist stop read operation nul string expect sentinel might locate bound memory cause excessive data read lead segmentation fault buffer overflow software may modify index perform pointer arithmetic reference memory location outside boundary buffer subsequent read operation produce undefined unexpected result
wrap around error occur whenever value incremented past maximum value type therefore wrap around small negative undefined value
product use untrusted input calculate use array index product validate incorrectly validate index ensure index reference valid position within array
software par format message structure handle incorrectly handle length field inconsistent actual length associate data attacker manipulate length parameter associate input inconsistent actual length input leverage cause target application behave unexpected possibly malicious way one possible motif pass arbitrarily large input application another possible motivation modification application state include invalid data subsequent property application weaknesses commonly lead attack buffer overflow execution arbitrary code
software correctly calculate size use allocate buffer could lead buffer overflow
software use function accept format string argument format string originates external source attacker modify externally control format string lead buffer overflow denial service data representation problem note circumstance internationalization set format string externally control design source format string trust e g contain library file modifiable system administrator external control might pose vulnerability
software correctly calculate length string contain wide multi byte character
software neutralize incorrectly neutralize delimiters
software receive input upstream component handle incorrectly handle expect special element miss
software receive input upstream component handle incorrectly handle additional unexpected special element provide
software properly handle input inconsistency exist two special character reserve word example problem would pair character appear wrong order special character properly nest
softw e f terminate incorrectly terminate string array null character equivalent terminator null termination error frequently occur two different way one error could cause null write bound lead overflow program could use strncpy function call incorrectly prevent null terminator add scenario possible
software properly account difference case sensitivity access determine property resource lead inconsistent result improperly handle case sensitive data lead several possible consequence include case insensitive password reduce size key space make brute force attack easier bypass filter access control use alternate name multiple interpretation error use alternate name
software validate input apply protection mechanism modify input could allow attacker bypass validation via dangerous input arise modification software need validate data proper time data canonicalized cleanse early validation susceptible various manipulation result dangerous input produce canonicalization cleanse
software filter data way cause reduce collapsed unsafe value violates expect security property
product implement protection mechanism relies list input property input explicitly allow policy input assume safe list permissive allow input unsafe lead resultant weaknesses
product implement protection mechanism relies list input property input allow policy otherwise require action neutralize additional process take place list incomplete lead resultant weaknesses developer often try protect product malicious input perform test input know bad special character invoke new command however list often account well know bad input attacker may able find malicious input expect developer allow bypass intend protection mechanism
regular expression overly restrictive prevents dangerous value detect weakness regular expression complexity rather regular expression match value intend consider use regexp identify acceptable value spot unwanted term overly restrictive regexp miss potentially security relevant value lead either false positive false negative depend regexp use within code consider expression intention expression complex value match maybe programmer plan check
software make invalid assumption protocol data memory organize lower level result unintended program behavior change platform protocol version memory organization data may change unintended way example architecture may place local variables b right next top may place next b top others may add pad pad size may vary ensure variable align proper word size protocol implementation common calculate offset relative another field pick specific piece data exceptional condition often involve new protocol version may add corner case change data layout unusual way result implementation access unintended field packet treat data one type data another type
software perform calculation produce integer overflow wraparound logic assume result value always larger original value introduce weaknesses calculation use resource management execution control integer overflow wraparound occur integer value incremented value large store associate representation occur value may wrap become small negative number may intend behavior circumstance rely wrap security consequence wrap unexpected especially case integer overflow trigger use user supply input become security critical result use control loop make security decision determine offset size behavior memory allocation copy concatenation etc
product subtract one value another result le minimum allowable integer value produce value equal correct result happen sign unsigned case
integer coercion refers set flaw pertain type cast extension truncation primitive data type several flaw fall category integer coercion error part error result availability data integrity issue however circumstance may result complicate security relate flaw buffer overflow condition
product calculate use incorrect maximum minimum value le correct value
truncation error occur primitive cast primitive smaller size data lose conversion primitive cast smaller primitive high order bit large value lose conversion potentially result unexpected value equal original value value may require index buffer loop iterator simply necessary state data case value cannot trust system undefined state method may employ viably isolate low bit value usage rare truncation usually imply implementation error occur
software receive input upstream component account byte order e g big endian little endian process input cause incorrect number value use
code transmits data another actor portion data include sensitive information accessible actor sensitive information could include data sensitive credential private message otherwise useful exploitation system internal file system structure
product provide different response incoming request way reveals internal state information unauthorized actor outside intend control sphere issue frequently occur authentication difference fail login message could allow attacker determine username valid exposure inadvertent bug intentional design
product behavior indicate important difference may observe unauthorized actor way reveals internal state decision process difference product equivalent functionality ideally product provide little information internal operation possible otherwise attacker could use knowledge internal operation simplify optimize attack case behavioral discrepancy use attacker form side channel
two separate operation product require different amount time complete way observable actor reveals security relevant information state product whether particular operation successful security relevant context even small variation time exploit attacker indirectly infer certain detail product internal operation example cryptographic algorithm attacker use time difference infer certain property private key make key easier guess time discrepancy effectively form time side channel
software generate error message include sensitive information environment user associate data sensitive information may valuable information password may useful launch serious attack error message may create different way self generate source code explicitly construct error message delivers externally generate external environment language interpreter handle error construct message whose content direct control programmer attacker may use content error message help launch another focused attack example attempt exploit path traversal weakness cwe might yield full pathname instal application turn could use select proper number sequence navigate target file attack use sql injection cwe might initially succeed error message could reveal malformed query would expose query logic possibly even password sensitive information use within query
product store transfer share resource contain sensitive information properly remove information product make resource available unauthorized actor resource may contain sensitive data include document packet message database etc data may useful individual user small set user share resource may need remove resource share outside trust group process removal sometimes call cleanse scrub example software use edit document might remove sensitive data reviewer comment local pathname document store proxy might remove internal ip address header make outgo request internet site
product intend functionality expose information certain actor accordance developer security policy information regard sensitive accord intend security policy stakeholder product administrator user others whose information process handle information developer must consider whether information regard sensitive different stakeholder user administrator stakeholder effectively intend security policy product expect uphold developer treat information sensitive introduce vulnerability violate expectation product user
process invoke sensitive command line argument environment variables element see process operate system many operate system allow user list information process own user user could see information command line argument environment variable setting data contain sensitive information credential might allow user launch attack software relate resource
application insert sensitive information debug code could expose information debug code disable production debug may necessary report detail information programmer however debug code disable application operate production environment sensitive information may expose attacker
application truncates display record process security relevant information way obscure source nature attack
application record display information would important identify source nature attack determine action safe
software record security relevant information accord alternate name affect entity instead canonical name
product release resource memory file make available reuse clear zeroize information contain resource product perform critical state transition make resource available reuse entity resource release make available reuse example memory de allocate operate system may make memory available another process disk space may reallocate file delete remove information require time additional resource operate system usually clear previously write information even resource reuse process weakness arise new data large old data leave portion old data still available equivalent error occur situation length data variable associate data structure memory clear use information may read le trustworthy party memory reallocate weakness apply hardware device system switch power sleep debug state normal operation execution change different user privilege level
software properly handle expect number value parameter field argument provide input value undefined
software properly handle expect number parameter field argument provide input parameter undefined
software handle incorrectly handle input related complex structure
software handle incorrectly handle particular element expect type e g expect digit provide letter z
program call function never guarantee work safely certain function behave dangerous way regardless use function category often implement without take security concern account get function unsafe perform bound check size input attacker easily send arbitrarily size input get overflow destination buffer similarly operator unsafe use read statically allocate character array perform bound check size input attacker easily send arbitrarily size input operator overflow destination buffer
program use chroot system call create jail change work directory afterward prevent access file outside jail improper use chroot may allow attacker escape chroot jail chroot function call change process current work directory relative path may still refer file system resource outside chroot jail chroot call
exception thrown function caught exception catch may cause program crash expose sensitive information
software perform operation privilege level higher minimum level require create new weaknesses amplifies consequence weaknesses new weaknesses expose run extra privilege root administrator disable normal security check perform operate system surround environment pre exist weaknesses turn security vulnerability occur operate raise privilege privilege management function behave le obvious way different quirk different platform inconsistency particularly pronounce transition one non root user another signal handler spawn process run privilege own process process run root signal fire sub process execute signal handler sub process operate root privilege
software check return value method function prevent detect unexpected state condition two common programmer assumption function call never fail matter function call fail attacker force function fail otherwise return value expect subsequent program logic could lead vulnerability software state programmer assume example program call function drop privilege check return code ensure privilege successfully drop program continue operate higher privilege
software incorrectly check return value function prevents software detect error exceptional condition important common function return value success action alert program whether handle error cause function
store password plaintext may result system compromise password management issue occur password store plaintext application property configuration file memory store plaintext password configuration file allow anyone read file access password protect resource context even storage plaintext password memory consider security risk password clear immediately use
storage password recoverable format make subject password reuse attack malicious user fact note recoverable encrypt password provide significant benefit plaintext password since subject reuse malicious attacker also malicious insider system administrator recover password directly use brute force search available information administrator use password account
software store password configuration file might accessible actor know password result compromise system password use attacker could gain access file learn store password worse yet change password one choosing
obscure password trivial encode protect password password management issue occur password store plaintext application property configuration file programmer attempt remedy password management problem obscure password encode function base encode effort adequately protect password
mechanism place manage password age user incentive update password timely manner security expert often recommend user change password regularly avoid reuse password although effective mitigation expiration window short cause user generate poor predictable password important discourage create similar password also useful password age mechanism notifies user password consider old request replace new strong password companion documentation stress important practice help user understand better support approach
allow password age occur unchecked result possibility diminish password integrity neglect include functionality management password age dangerous allow password age continue unchecked password must give maximum life span user require update new different password
product incorrectly assign privilege particular actor create unintended sphere control actor
particular privilege role capability right use perform unsafe action intend even assign correct entity
two distinct privilege role capability right combine way allow entity perform unsafe action would allow without combination
software properly manage privilege switch different context different privilege sphere control
elevate privilege level require perform operation chroot drop immediately operation perform
software attempt drop privilege check incorrectly check see drop succeed drop fail software continue run raise privilege might provide additional access unprivileged user
software handle incorrectly handle insufficient privilege perform operation lead resultant weaknesses
installation instal file permission set allow anyone modify file
product define set insecure permission inherit object create program
product inherits set insecure permission object e g copy archive file without user awareness involvement
execute software set permission object way violates intend permission specify user
application handle incorrectly handle insufficient privilege access resource functionality specify permission may cause follow unexpected code path may leave application invalid state
software preserve permission incorrectly preserve permission copy restore share object cause le restrictive permission intend
software properly verify critical resource own proper entity
product require authentication product alternate path channel require authentication
attack focus weakness cause improperly implement authentication scheme subject spoof attack
capture replay flaw exist design software make possible malicious user sniff network traffic bypass authentication replay server question effect original message minor change capture replay attack common difficult defeat without cryptography subset network injection attack rely observe previously send valid command change slightly necessary resending command server
software validate incorrectly validate certificate certificate invalid malicious might allow attacker spoof trust entity interfere communication path host client software might connect malicious host believing trust host software might deceive accept spoof data appear originate trust host
software follow incorrectly follow chain trust certificate back trust root certificate result incorrect trust resource associate certificate system follow chain trust certificate root server certificate lose usefulness metric trust essentially trust gain certificate derive chain trust reputable trust entity end list end user must trust reputable source reputable source must vouch resource question medium certificate case trust traverse several entity vouch one another entity trust end user one end trust chain certificate wield resource end chain user receive certificate end one trust chain proceeds check first link chain real trust derive since entire chain must traverse back trust source verify certificate several way chain trust might break include limit certificate chain self sign unless root every intermediate certificate check start original certificate way root certificate intermediate ca sign certificate expect basic constraint important extension root certificate compromise authorize wrong party
software check incorrectly check revocation status certificate may cause use certificate compromise improper check certificate revocation far serious flaw relate certificate failure use revoked certificate almost certainly malicious common reason certificate revocation compromise system question result legitimate server use revoked certificate unless sorely sync
requirement software dictate use establish authentication algorithm implementation algorithm incorrect incorrect implementation may allow authentication bypass
software implement authentication technique skip step weaken technique authentication technique follow algorithm define exactly otherwise authentication bypass easily subject brute force attack
authentication algorithm sound implement mechanism bypass result separate weakness primary authentication error
software perform authentication functionality require provable user identity consume significant amount resource
software implement sufficient measure prevent multiple fail authentication attempt within short time frame make susceptible brute force attack
use single factor authentication lead unnecessary risk compromise compare benefit dual factor authentication scheme use multiple authentication scheme simply pile complexity top authentication inestimably valuable measure redundancy use weak reuse common password rampant internet without add protection multiple authentication scheme single mistake result compromise account reason multiple scheme possible also easy use implement require
use password system primary mean authentication may subject several flaw shortcoming reduce effectiveness mechanism
application store sensitive information cleartext within resource might accessible another control sphere information store cleartext attacker could potentially read even information encode way human readable certain technique could determine encode use decode information
application store sensitive information cleartext within gui attacker often obtain data gui even hide use api directly access gui object windows menus even information encode way human readable certain technique could determine encode use decode information
software transmits sensitive security critical data cleartext communication channel sniff unauthorized actor many communication channel sniff attacker data transmission example network traffic often sniff attacker access network interface significantly lower difficulty exploitation attacker
use hard cod cryptographic key significantly increase possibility encrypt data may recover
software perform key exchange actor without verify identity actor perform key exchange preserve integrity information send two entity guarantee entity claim may enable attacker impersonate actor modify traffic two entity typically involve victim client contact malicious server impersonate trust server client skip authentication ignore authentication failure malicious server may request authentication information user malicious server use authentication information log trust server use victim credential sniff traffic victim trust server etc
nonce use present occasion
product use cryptographic key password past expiration date diminishes safety significantly increase time window crack attack key expiration key necessarily ensure compromise significant concern key remain use prolong period time decrease probability integrity reason important replace key within period time proportional strength
product implement require step cryptographic algorithm result weaker encryption advertise algorithm
product use algorithm produce digest output value meet security expectation hash function allow adversary reasonably determine original input preimage attack find another input produce hash nd preimage attack find multiple input evaluate hash birthday attack hash function define algorithm map arbitrarily size data fix size digest output follow property hold algorithm invertible also call one way reversible algorithm deterministic input produce digest every time build definition cryptographic hash function must also ensure malicious actor cannot leverage hash function reasonable chance success determine follow original input preimage attack give digest another input produce digest nd preimage attack give original input set two input evaluate digest birthday attack give actor arbitrarily choose input hash reasonable amount time regard reasonable varies context threat model general reasonable could cover attack efficient brute force e average attempt half possible combination note attack might efficient brute force still regard achievable real world algorithm meet condition generally consider weak general use hash addition algorithmic weaknesses hash function make weak use hash security context break security guarantee example use hash function without salt store password sufficiently short could enable adversary create rainbow table ref recover password certain condition attack work hash function md sha sha
software use algorithm scheme produce insufficient entropy leave pattern cluster value likely occur others
number possible random value smaller need product make susceptible brute force attack
software use pseudo random number generator prng correctly manage seed prngs deterministic output appear random cannot actually create entropy rely cryptographically secure unique seed entropy proper seed critical secure operation prng management seed could break two main area protect seed cryptographic material cryptographic key whenever possible use uniquely generate seed cryptographically secure source prngs require seed input generate stream number functionally indistinguishable random number output many case sufficient cryptographic use output prng directly determine seed provide input seed ascertain third party entire output prng make know seed keep secret ideally able guessed example current time may poor seed know approximate time prng seed greatly reduce possible key space seed necessarily need unique reuse seed may open attack seed discover
product use pseudo random number generator prng security context prng algorithm cryptographically strong non cryptographic prng use cryptographic context expose cryptography certain type attack often pseudo random number generator prng design cryptography sometimes mediocre source randomness sufficient preferable algorithm use random number weak generator generally take le process power use precious finite entropy source system prngs might useful feature feature could use break cryptography
number object predictable base observation attacker make state system network time process id etc
exact value random number precisely predict observe previous value
software random number generator produce series value observe use infer relatively small range possibility next value could generate output random number generator predictable base observation previous value case attacker cannot predict exact value produce next narrow possibility significantly reduce amount effort perform brute force attack example suppose product generate random number always produce larger value reach generator produce attacker know next value somewhere instead possibility attacker need consider
software properly verify source data communication valid
software verify incorrectly verifies cryptographic signature data
software two different source data information use source le support verification le trust le resistant attack
software process trust data accept untrusted data also include trust data treat untrusted data trust
software properly distinguish different type element way lead insecure behavior
software use transmission protocol include mechanism verify integrity data transmission checksum integrity check value checksum omit protocol way determine data corrupt transmission lack checksum functionality protocol remove first application level check data use end end philosophy check state integrity check perform lowest level completely implement exclude sanity check input validation perform application protocol checksum important level checksum since perform completely previous level take account entire message oppose single packet
software validate incorrectly validate integrity check value checksums message may prevent detect data modify corrupted transmission improper validation checksum use result unnecessary risk easily mitigate protocol specification describe algorithm use calculate checksum simple matter implement calculation verify calculate checksum receive checksum match improper verification calculate checksum receive checksum lead far greater consequence
software user interface warn user undertake unsafe action behalf user make easier attacker trick user inflict damage system software system warn user potentially dangerous action may occur user proceeds example user downloads file unknown source attempt execute file machine application gui indicate file unsafe
user interface provide warn user regard dangerous sensitive operation warn noticeable enough warrant attention
product properly prevent person private personal information access actor either explicitly authorize access information implicit consent person information collect many type sensitive information product must protect attacker include system data communication configuration business secret intellectual property individual personal private information private personal information may include password phone number geographic location personal message credit card number etc private information important consider whether person user product part data set process product exposure private information necessarily prevent product work properly fact exposure might intend developer e g part data share organization however exposure personal private information still undesirable explicitly prohibit law regulation type private information include government identifier social security number contact information home address telephone number geographic location user employment history financial data credit card number salary bank account debt picture video audio behavioral pattern web surf history certain activity perform etc relationship type relationship others family friends contact etc communication e mail address private message text message chat log etc health medical condition insurance status prescription record account password credential information may characterize pii personally identifiable information protect health information phi etc category private information may overlap vary base intend usage policy practice particular industry sometimes data labeled private privacy implication different context example student identification number usually consider private explicit publicly available map individual student personal information however school generate identification number base student social security number identification number consider private
software check status file directory access produce race condition file replace link access perform cause software access wrong file developer might expect narrow time window time check time use still race condition attacker could cause software slow e g memory consumption cause time window become larger alternately situation attacker could win race perform large number attack
software use signal handler introduces race condition race condition frequently occur signal handler since signal handler support asynchronous action race condition variety root cause symptoms attacker may able exploit signal handler race condition cause software state corrupt possibly lead denial service even code execution issue occur non reentrant function state sensitive action occur signal handler may call time behavior violate assumption make regular code interrupt signal handler may also invoke function call inopportune moment non reentrant function already run memory corruption could occur may exploitable code execution another signal race condition commonly find occur free call within signal handler result double free therefore write condition even give pointer set null free race condition still exist time memory free pointer set null especially problematic signal handler set one signal since mean signal handler may reentered several know behavior relate signal handler receive label signal handler race condition share state e g global data static variables accessible signal handler regular code share state signal handler signal handler use non reentrant functionality within signal handler generally imply share state use example malloc free non reentrant may use global static data structure manage memory indirectly use innocent seem function syslog function could exploit memory corruption possibly code execution association signal handler function multiple signal might imply share state since code resource access example source double free use free weaknesses use setjmp longjmp mechanism prevent signal handler return control back original functionality technically race condition signal handler design call call introduce security problem even concurrent call signal handler source double free use free weaknesses signal handler vulnerability often classify base absence specific protection mechanism although style classification discourage cwe programmer often choice several different mechanism address weakness protection mechanism may preserve exclusivity access share resource behavioral atomicity relevant code avoid share state use synchronization signal handler use synchronization regular code disable masking signal provide atomicity effectively ensure exclusivity
code contain switch statement switch variable modify switch still execute result unexpected behavior issue particularly important case switch statement involve fall style case statement e end break variable test switch change course execution could change intend logic switch much place process contradictory state case could even result memory corruption
two thread execution use resource simultaneously exist possibility resource may use invalid turn make state execution undefined
software check state resource use resource resource state change check use way invalidate result check cause software perform invalid action resource unexpected state weakness security relevant attacker influence state resource check use happen share resource file memory even variables multithreaded program
product perform series non atomic action switch context cross privilege security boundary race condition allow attacker modify misrepresent product behavior switch commonly see web browser vulnerability attacker perform certain action browser transition trust untrusted domain vice versa browser performs action one domain use trust level resource domain
product divide value zero weakness typically occur unexpected value provide product error occur properly detect frequently occur calculation involve physical dimension size length width height
software properly determine state cause assume state x fact state cause perform incorrect operation security relevant manner
program sends non clone mutable data argument method function function method call alter delete mutable data could violate assumption call function make state situation unknown code call reference mutable data external code could make change data send data previously clone modify data might valid context execution
send non clone mutable data return value may result data alter delete call function situation function return reference mutable data possible external code call function may make change data send data previously clone class use modify data may violate assumption internal state
open temporary file without appropriate measure control leave file content function impact vulnerable attack
software create temporary file directory whose permission allow unintended actor determine file existence otherwise access file operate system fact temporary file exist may apparent user sufficient privilege access directory since file visible application use temporary file could know one access list process system attacker gain information user time correlate application user run attacker could potentially discover user action higher level security could breach
covert time channel convey information modulate aspect system behavior time program receive information observe system behavior infer protect information instance know data transmit party provide malicious user privilege information also externally monitor time operation potentially reveal sensitive data example cryptographic operation expose internal state time take perform operation varies base state covert channel frequently classify either storage time channel examples covert time channel system page rate time certain transaction require execute time take gain access share bus
constant symbolic reference object use even though reference resolve different object time
software detect specific error take action handle error
plan deprecation see maintenance note consider cwe cwe cwe ignore exception error condition may allow attacker induce unexpected behavior unnoticed
software encounter error provide status code return value indicate error occur
function operation return incorrect return value status code indicate error cause product modify behavior base incorrect result lead unpredictable behavior function use make security critical decision provide security critical information wrong status code cause software assume action safe even
software properly check function operation return value legitimate function expect software
catch nullpointerexception use alternative programmatic check prevent dereferencing null pointer programmer typically catch nullpointerexception three circumstance program contain null pointer dereference catch result exception easier fix underlie problem program explicitly throw nullpointerexception signal error condition code part test harness supply unexpected input class test three circumstance last acceptable
catch overly broad exception promotes complex error handle code likely contain security vulnerability multiple catch block get ugly repetitive condense catch block catch high level class like exception obscure exception deserve special treatment catch point program catch overly broad exception essentially defeat purpose java type exception become particularly dangerous program grows begin throw new type exception new exception type receive attention
throw overly broad exception promotes complex error handle code likely contain security vulnerability declare method throw exception throwable make difficult caller perform proper error handle error recovery java exception mechanism example set make easy caller anticipate go wrong write code handle specific exceptional circumstance declare method throw generic form exception defeat system
process close sensitive file descriptor invoke child process allow child perform unauthorized operation use descriptor new process fork execute child process inherits open file descriptor child process fewer privilege parent process might introduce vulnerability child process access file descriptor privilege access associate file
software allow entity perform legitimate expensive operation authentication authorization take place
software handle incorrectly handle compress input high compression ratio produce large output example data amplification decompression bomb small zip file produce large amount data decompress
software resource pool large enough handle peak demand allow attacker prevent others access resource use relatively large number request resource frequently consequence flood connection session
software properly check existence lock lock externally control influence actor outside intend sphere control prevent software act associate resource perform behavior control presence lock relevant lock might include exclusive lock mutex modify share resource treat lock lock hold indefinite period time denial service could permanent
software lock correctly lock resource software must exclusive access resource resource properly lock attacker could modify resource operate software might violate software assumption resource change potentially lead unexpected behavior
product check see lock present perform sensitive operation resource
software use primary channel administration restrict functionality properly protect channel
software protect primary channel use level protection alternate channel
product open alternate channel communicate authorize user channel accessible actor creates race condition allow attacker access channel authorize user
web application adequately enforce appropriate authorization restrict url script file web application susceptible direct request attack often make false assumption resource reach give navigation path apply authorization certain point path
application search critical resource use externally supply search path point resource application direct control might allow attacker execute program access unauthorized data file modify configuration unexpected way application use search path locate critical resource program attacker could modify search path point malicious program target application would execute problem extend type critical resource application trust common variant untrusted search path various unix linux base system path environment variable may consult locate executable program ld preload may use locate separate library various microsoft base system path environment variable consult locate dll dll find path appear earlier search order
product use fix control search path find resource one location path control unintended actor although weakness occur type resource frequently introduce product use directory search path find executables code library path contain directory modify attacker tmp current work directory windows base system loadlibrary loadlibraryex function call dll name contain fully qualify path function follow search order include two path element might uncontrolled directory program load current work directory case attack conduct remotely smb webdav network share use unix base system path might create contain empty element e g splice empty variable path empty element interpret equivalent current work directory might untrusted search element software package management frameworks e g npm rubygems pypi framework may identify dependency third party library package consult repository contain desire package framework may search public repository private repository could exploit attacker place malicious package public repository name package private repository search path might directly control developer rely framework search order effectively contain untrusted element
product use search path contain unquoted element element contain whitespace separator cause product access resource parent path malicious individual access file system possible elevate privilege insert file c program exe run privilege program make use winexec
wrong handler assign process object example deploy wrong handler would call servlet reveal source code jsp file automatically determine type object even contradictory explicitly specify type
handler available implement exception thrown catch process give opportunity decide give failure event worth change execution
application use signal handler share state signal handler properly mask prevent signal handler invoke original signal handler still run execution signal handler interrupt another handler different signal send two handler share state global variables attacker corrupt state send another signal first handler complete execution
software store raw content support code web document root extension specifically handle server code store file extension inc pl web server handler extension server likely send content file directly requester without pre process expect file contain sensitive information database credential may allow attacker compromise application associate component
software allow attacker upload transfer file dangerous type automatically process within product environment
product act intermediary monitor two endpoint complete model endpoint feature behavior state potentially cause product perform incorrect action base incomplete model
behavior functionality change new version new environment know manageable b
feature api function perform accord specification
malformed abnormal http request interpret one entity data flow user web server proxy firewall interpret inconsistently allow attacker smuggle request one device without device aware
ui function security feature appear support give feedback user suggest support underlie functionality implement
ui function obsolete product warn user
ui perform wrong action respect user request
ui multiple interpretation user input prompt user selects le secure interpretation
software initialize critical internal variables data store use input modify untrusted actor software system reluctant trust variables initialize outside trust boundary especially initialize user variables may initialize incorrectly attacker initialize variable influence vulnerable system
software exit otherwise modify operation security relevant error occur initialization configuration file format error cause software execute le secure fashion intend administrator
software properly clean remove temporary support resource use
product clean state incorrectly clean state exception thrown lead unexpected state control flow often function loop become complicate level resource cleanup need throughout execution exception disturb flow code prevent necessary cleanup happen
duplicate key associative list lead non unique key mistake error duplicate key entry alist design properly could use constant time replace function however duplicate key entries could insert mistake ambiguity duplicate key entries association list recommend allow
accidental deletion data structure sentinel cause serious program logic problem often time data structure sentinel use mark structure data structure common example null character end string another common example link list may contain sentinel mark end list dangerous allow type control data easily accessible therefore important protect deletion modification outside wrapper interface provide safety
accidental addition data structure sentinel cause serious program logic problem data structure sentinel often use mark structure data common example null character end string special sentinel mark end link list dangerous allow type control data easily accessible therefore important protect addition modification sentinel
function return pointer memory outside buffer pointer expect reference
code call sizeof malloced pointer type always return wordsize produce unexpected result programmer intend determine much memory allocate use sizeof pointer sometimes generate useful information obvious case find wordsize platform often appearance sizeof pointer indicate bug
c c one may often accidentally refer wrong memory due semantics math operation implicitly scale
application subtract one pointer another order determine size calculation incorrect pointer exist memory chunk
application use external input reflection select class code use sufficiently prevent input select improper class code application use external input determine class instantiate method invoke attacker could supply value select unexpected class method occur attacker could create control flow path intend developer path could bypass authentication access control check otherwise cause application behave unexpected manner situation become doomsday scenario attacker upload file location appear application classpath cwe add new entries application classpath cwe either condition attacker use reflection introduce new malicious behavior application
software properly protect assume immutable element modify attacker occur particular input critical enough function application modifiable certain resource often assume immutable hide form field web application cooky reverse dns lookup
web application sufficiently verify input assume immutable actually externally controllable hidden form field web product properly protect assume immutable value modification hide form field parameter cooky url lead modification critical data web application often mistakenly make assumption data pass client hide field cooky susceptible tamper improper validation data user controllable lead application process incorrect often malicious input example custom cooky commonly store session data persistent data across session kind session data normally involved security relate decision server side user authentication access control thus cooky might contain sensitive data user credential privilege dangerous practice often lead improper reliance value client provide cookie server side application
code use function inconsistent implementation across operate system version use inconsistent implementation cause change behavior code port build different environment programmer expect lead security problem case implementation many function varies platform time even different version platform implementation difference include slight difference way parameter interpret lead inconsistent result implementation function carry significant security risk function might define platform function might change return code provide change mean return code
behavior function undefined unless control parameter set specific value
null pointer dereference occur application dereferences pointer expect valid null typically cause crash exit null pointer dereference issue occur number flaw include race condition simple program omission
code use deprecated obsolete function suggest code actively review maintain program languages evolve function occasionally become obsolete due advance language improve understanding operation perform effectively securely change convention govern certain operation function remove usually replace newer counterpart perform task different hopefully improve way
code default case switch statement might lead complex logical error resultant weaknesses flaw represent common problem software development possible value variable consider handle give process decision make base poor information cascade failure result cascade failure may result number security issue constitute significant failure system
program define signal handler call non reentrant function non reentrant function function cannot safely call interrupt recall first call finish without result memory corruption lead unexpected system state unpredictable result variety potential consequence depend context include denial service code execution many function reentrant result corruption memory use signal handler function call syslog example order perform functionality allocate small amount memory scratch space syslog suspend signal call signal handler call syslog memory use function enters undefined possibly exploitable state implementation malloc free manage metadata global structure order track memory allocate versus memory available non reentrant simultaneous call function cause corruption metadata
programmer accidentally use wrong operator change application logic security relevant way type error generally result typo
code explicitly delimit block intend contain statement create logic error languages brace delimiters optional block delimiter omit possible insert logic error statement think block case logic error security implication
program omit break statement within switch similar construct cause code associate multiple condition execute cause problem programmer intend execute code associate one condition lead critical code execute situation
java package inherently close therefore rely code security good practice purpose package scope prevent accidental access part program ease software development feature security feature
product sufficiently enforce boundary state different session cause data provide use wrong session data bleed one session another member variables singleton object servlets object share pool case servlets developer sometimes understand unless servlet implement singlethreadmodel interface servlet singleton one instance servlet single instance use use handle multiple request process simultaneously different thread common result developer use servlet member field way one user may inadvertently see another user data word store user data servlet member field introduces data access race condition
application deploy unauthorized actor debug code still enable active create unintended entry point expose sensitive information common development practice add back door code specifically design debug test purpose intend ship deploy application back door entry point create security risk consider design test fall outside expect operate condition application
product download source code executable remote location execute code without sufficiently verify origin integrity code attacker execute malicious code compromise host server perform dns spoof modify code transit
application properly prevent sensitive system level information access unauthorized actor level access underlie system application network base software web application often run top operate system similar environment application communicates outside party detail underlie system expect remain hide path name data file o user instal package application environment etc system information may provide application bury within diagnostic debug message debug information help adversary learn system form attack plan information exposure occur system data debug information leave program output stream log function make accessible unauthorized party use weaknesses attacker could cause error occur response error reveal detail system information along impact attacker use message reveal technology operate system product version tune attack know vulnerability technology application may use diagnostic method provide significant implementation detail stack trace part error handle mechanism
product mix trust untrusted data data structure structure message trust boundary think line draw program one side line data untrusted side line data assume trustworthy purpose validation logic allow data safely cross trust boundary move untrusted trust trust boundary violation occur program blur line trust untrusted combining trust untrusted data data structure become easier programmer mistakenly trust unvalidated data
application deserializes untrusted data without sufficiently verify result data valid often convenient serialize object communication save later use however deserialized data code often modify without use provide accessor function use cryptography protect furthermore cryptography would still client side security dangerous security assumption data untrusted trust well form developer place restriction gadget chain series instance method invocation self execute deserialization process e object return caller sometimes possible attacker leverage perform unauthorized action like generate shell
covert storage channel transfer information set bits one program read bits another distinguishes case ordinary operation bits use convey encode information covert storage channel occur band data store message purpose memory reuse covert channel frequently classify either storage time channel examples would include use file intend hold audit information convey user password use name file perhaps status bit associate read user signal content file steganography conceal information manner one intend recipient know existence message good example covert storage channel
product require user strong password make easier attacker compromise user account authentication mechanism often rely memorize secret also know password provide assertion identity user system therefore important password sufficient complexity impractical adversary guess specific requirement around complex password need depend type system protect select correct password requirement enforce implementation critical overall success authentication mechanism
login page use adequate measure protect user name password transit client server
code use cache contain sensitive information cache read actor outside intend control sphere application may use cache improve efficiency communicate remote entity perform intensive calculation cache maintain pool object thread connection page financial data password resource minimize time take initialize access resource cache accessible unauthorized actor attacker read cache obtain sensitive information
information write log file sensitive nature give valuable guidance attacker expose sensitive user information log information may helpful development stage important log level set appropriately product ship sensitive user data system information accidentally expose potential attacker different log file may produce store server log file e g server log give information whatever application leave file usually give full path name system information sometimes usernames password log file use debug
source code web server repository often contain sensitive information generally accessible user situation critical remove source code area server example obtain perl source code system allow attacker understand logic script extract extremely useful information code bug logins password
software use standardize method handle error throughout code might introduce inconsistent error handle resultant weaknesses application handle error message individually one one basis likely result inconsistent error handle cause error may lose also detail information cause error may unintentionally return user
code contain comment suggest presence bug incomplete functionality weaknesses many suspicious comment bug hack fixme later later todo code indicate miss security functionality check others indicate code problem programmer fix hard cod variables error handle use store procedure performance issue
program use hard cod constant instead symbolic name security critical value increase likelihood mistake code maintenance security policy change developer find occurrences hard cod constant incorrect policy decision may make one constant change make change value require code change may difficult impossible system release field addition hard cod value may become available attacker code ever disclose
software mask password entry increase potential attacker observe capture password
web server fully parse request url examines authorization may possible attacker bypass authorization protection instance character string mean current directory somedirectory protect directory attacker request somedirectory attacker may able gain access resource convert authorization check perform
software contain dead code never execute dead code source code never execute run program surround code make impossible section code ever execute
function return address stack variable cause unintended program behavior typically form crash local variables allocate stack program return pointer local variable return stack address subsequent function call likely use stack address thereby overwrite value pointer longer correspond variable since function stack frame invalidated return best cause value pointer change unexpectedly many case cause program crash next time pointer dereferenced
variable value assign never use make dead store assignment variable either assign another value go scope likely variable simply vestigial also possible unused variable point bug
application relies existence value cooky perform security critical operation properly ensure set valid associate user attacker easily modify cooky within browser implement client side code outside browser reliance cooky without detail validation integrity check allow attacker bypass authentication conduct injection attack sql injection cross site script otherwise modify input unexpected way
product properly synchronize share data static variables across thread lead undefined behavior unpredictable data change within servlets share static variables protect concurrent access servlets multithreaded typical program mistake j ee application since multithreading handle framework share variable influence attacker one thread could wind modify variable contain data valid different thread also use data within variable note weakness unique servlets
software contain expression always evaluate false
software contain expression always evaluate true
software contain clone method call super clone obtain new object implementation clone obtain new object call super clone class follow convention subclass clone method return object wrong type
software maintain equal hashcodes equal object java object expect obey number invariants relate equality one invariants equal object must equal hashcodes word equal b true hashcode b hashcode
code return statement inside finally block cause thrown exception try block discard
software contain empty synchronize block empty synchronize block actually accomplish synchronization may indicate troubled section code empty synchronize block occur code longer need within synchronize block comment without remove synchronize block
software make explicit call finalize method outside finalizer java language specification allow object finalize method call outside finalizer usually bad idea example call finalize explicitly mean finalize call first time explicit call last time call make object garbage collect
software set pointer specific address null use fix address portable address probably valid environment platform
cast non structure type structure type access field lead memory access error data corruption
program compare object reference instead content object prevent detect equivalent object example java compare object use usually produce deceptive result since operator compare object reference rather value often mean use string actually compare string reference value
product use wrong operator compare string use equal method use instead java use compare two string equality actually compare two object equality rather string value equality chance good two reference never equal weakness often affect program correctness equality use security decision unintended comparison result could leverage affect program security
servlet catch exception may reveal sensitive debug information servlet throw exception default error response servlet container send back user typically include debug information information great value attacker example stack trace might show attacker malformed sql query string type database use version application container information enable attacker target know vulnerability component
web application accept user control input specifies link external site use link redirect simplifies phishing attack http parameter may contain url value could cause web application redirect request specify url modify url value malicious site attacker may successfully launch phishing scam steal user credential server name modify link identical original site phishing attempt trustworthy appearance
client server product perform authentication within client code server code allow server side authentication bypass via modify client omit authentication check client side authentication extremely weak may breach easily attacker may read source code reverse engineer authentication mechanism access part application would otherwise protect
multiple socket allow bind port service port may steal spoofed system combination set reuseaddr socket option call bind allow process bind port previous process bound inaddr allow user bind specific address server bound inaddr unprivileged port steal udp packet tcp connection
product properly check input use loop condition potentially lead denial service consequence excessive looping
program use double checked lock access resource without overhead explicit synchronization lock insufficient double check lock refers situation programmer check see resource initialize grab lock check see resource initialize performs initialization occur yet do guarantee work languages architecture summary thread may operate inside synchronous block guarantee see operation execute order would appear inside synchronous block
software process xml document contain xml entity uris resolve document outside intend sphere control cause product embed incorrect document output xml document optionally contain document type definition dtd among feature enable definition xml entity possible define entity provide substitution string form uri xml parser access content uri embed content back xml document process submit xml file defines external entity file uri attacker cause process application read content local file example uri file c winnt win ini designate windows file c winntwin ini file etc passwd designate password file unix base system use uris scheme http attacker force application make outgo request server attacker cannot reach directly use bypass firewall restriction hide source attack port scan content uri read feed back application process xml application may echo back data e g error message thereby expose file content
product create search index private sensitive document properly limit index access actor authorize see original information web sit document repository may apply index routine group private document facilitate search index result available party access document indexed attacker could obtain portion document conduct target search read result risk especially dangerous search result include surround text part search query issue appear search engine configure implement ignore critical file remain hide even without permission download file directly remote user could read
accord wasc insufficient session expiration web site permit attacker reuse old session credential session id authorization
product contain assert similar statement trigger attacker lead application exit behavior severe necessary assertion good catch logic error reduce chance reach serious vulnerability condition still lead denial service example server handle multiple simultaneous connection assert occur one single connection cause connection drop reachable assertion lead denial service
activex control intend use web browser expose dangerous methods perform action outside browser security model e g zone domain activex control exercise far greater control operate system typical java javascript expose method subject various vulnerability depend implement behavior method whether input validation perform provide argument integrity check origin validation method could invoke attacker
database cursor close properly could become accessible user retain privilege originally assign leave cursor dangling example improper dangling cursor could arise unhandled exception impact issue depend cursor role sql injection attack commonly possible
set new password user product require knowledge original password use another form authentication could use attacker change password another user thus gain privilege associate user
product use external input determine name variables information extract without verify name specify variables valid could cause program overwrite unintended variables example php extraction use provide functionality similar register globals dangerous functionality frequently disable production system call extract import request variables without proper argument could allow arbitrary global variables overwrite include superglobals similar functionality possible interpret languages include custom languages
product use regular expression either contain executable component user control input allow user enable execution insert pattern modifier case possible php preg replace function possibly languages user control input insert string later parse regular expression
product use regular expression sufficiently restrict set allow value effectively cause regexp accept substring match pattern produce partial comparison target case lead weaknesses common error include identify begin end target string use wildcards instead acceptable character range others
language user influence name variable runtime variable name control attacker read write arbitrary variables access arbitrary function resultant vulnerability depend behavior application crossover point control data flow reachable relate variables function
product call function procedure routine argument correctly specify lead always incorrect behavior resultant weaknesses multiple way weakness introduce include wrong variable reference incorrect number argument incorrect order argument wrong type argument wrong value
system authorization functionality prevent one user gain access another user data record modify key value identify data retrieval user record occur system base key value user control key would typically identify user relate record store system would use lookup record presentation user likely attacker would authenticate user system however authorization process would properly check data access operation ensure authenticate user perform operation sufficient entitlement perform request data access hence bypass authorization check present system example attacker look place user specific data retrieve e g search screen determine whether key item look controllable externally key may hide field html form field might pass url parameter unencrypted cookie variable case possible tamper key value one manifestation weakness system use sequential otherwise easily guessable session id would allow one user easily switch another user session read modify data
software contain mechanism user recover change password without know original password mechanism weak common application mechanism provide mean user gain access account event forget password often password recovery mechanism weak effect make likely would possible person legitimate system user gain access user account weak password recovery scheme completely undermine strong password authentication scheme weakness may security question easy guess find answer e g question common answer find use social medium might implementation weakness password recovery mechanism code may instance trick system e mail new password e mail account user might throttle do rate password reset legitimate user deny service attacker attacker try recover password rapid succession system may send original password user rather generate new temporary password summary password recovery functionality carefully design implement often become system weakest link misuse way would allow attacker gain unauthorized access system
application construct name file resource use input upstream component restrict incorrectly restrict result name may produce resultant weaknesses instance name resource contain script character possible script may get execute client browser application ever display name resource dynamically generate web page alternately resource consume application parser specially craft name exploit vulnerability internal parser potentially result execution arbitrary code server machine problem vary base context usage malformed resource name whether vulnerability present assumption make target technology would make code execution possible
software use external input dynamically construct xpath expression use retrieve data xml database neutralize incorrectly neutralize input allow attacker control structure query net effect attacker control information select xml database may use ability control application flow modify logic retrieve unauthorized data bypass important check e g authentication
software contain account lockout protection mechanism mechanism restrictive trigger easily allow attacker deny service legitimate user cause account lock account lockout security feature often present application countermeasure brute force attack password base authentication mechanism system certain number fail login attempt user account may disable certain period time unlocked administrator security event may also possibly trigger account lockout however attacker may use security feature deny service legitimate system user therefore important ensure account lockout security mechanism overly restrictive
application conform api requirement function call require extra privilege could allow attacker gain privilege cause function call incorrectly application contain certain function perform operation require elevate level privilege caller privilege api must careful ensure assumption make apis valid validity argument account know weaknesses design implementation api call api safe context caller api follow requirement may allow malicious user process elevate privilege hijack process steal sensitive data instance important know privilege apis shed privilege return caller privilege function might make certain assumption data context state information pass caller important always know privilege apis call order ensure elevate level privilege cannot exploit
software use obfuscation encryption input mutable external actor software use integrity check detect input modify application relies obfuscation incorrectly apply weak encryption protect client controllable token parameter may effect user state system state decision make server without protect token parameter integrity application vulnerable attack adversary traverse space possible value say token parameter order attempt gain advantage goal attacker find another admissible value somehow elevate privilege system disclose information change behavior system way beneficial attacker application protect critical token parameter integrity able determine value tamper measure use protect data confidentiality rely upon provide integrity service
software use external input dynamically construct xquery expression use retrieve data xml database neutralize incorrectly neutralize input allow attacker control structure query net effect attacker control information select xml database may use ability control application flow modify logic retrieve unauthorized data bypass important check e g authentication
software call non reentrant function concurrent context compete code sequence e g thread signal handler may opportunity call function otherwise influence state
program invokes potentially dangerous function could introduce vulnerability use incorrectly function also use safely
convert one data type another long integer data omit translated way produce unexpected value result value use sensitive context dangerous behavior may occur
software use multiple resource identifier context unique identifier require software assume resource unique identifier software could operate wrong resource attacker cause multiple resource associate identifier
software use low level functionality explicitly prohibit framework specification software suppose operate use low level functionality violate specification unexpected way effectively disable build protection mechanism introduce exploitable inconsistency otherwise expose functionality attack
web application sends redirect another location instead exit execute additional code
software assign owner resource owner outside intend control sphere may allow resource manipulate actor outside intend control sphere
developer build security critical protection mechanism software compiler optimize program mechanism remove modify
software provide application program interface api similar interface interaction external actor interface include dangerous method function properly restrict weakness lead wide variety resultant weaknesses depend behavior expose method apply number technology approach activex control java function ioctls exposure occur different way function method never intend expose outside actor function method intend accessible limit set actor internet base access single web site
software return custom error page user possibly expose sensitive information
application attempt return memory resource system call wrong release function call appropriate release function incorrectly weakness take several form memory allocate explicitly implicitly via one memory management method deallocated use different non compatible function cwe function call memory management routine choose appropriate however use incorrectly cwe
software lock critical resource time intend lead unexpected state system software operate concurrent environment repeatedly lock critical resource consequence vary base type lock lock implementation resource protect situation semaphore resource pool extra lock call reduce size total available pool possibly lead degrade performance denial service trigger attacker similar unrestricted lock cwe context binary lock likely duplicate lock attempt never succeed since lock already hold progress may possible
software unlock critical resource time intend lead unexpected state system software operate concurrent environment repeatedly unlock critical resource consequence vary base type lock lock implementation resource protect situation semaphore resource pool extra call unlock increase count number available resource likely result crash unpredictable behavior system near capacity
software declare critical variable field member public intend security policy require private issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
software define public method read modifies private variable attacker modify variable contain unexpected value could violate assumption part code additionally attacker read private variable may expose sensitive information make easier launch attack
software allocate reusable resource group resource behalf actor without impose restriction size number resource allocate violation intend security policy actor code frequently work limit resource programmer must careful ensure resource consume quickly easily without use quota resource limit protection mechanism easy attacker consume many resource rapidly make many request cause larger resource use need many resource allocate single resource large prevent code work correctly possibly lead denial service
software properly maintain reference resource allocate prevents resource reclaim necessarily apply languages frameworks automatically perform garbage collection since removal reference may act signal resource ready reclaim
software release resource effective lifetime end e resource longer need resource release use allow attacker cause denial service cause allocation resource without trigger release frequently affect resource include memory cpu disk space power battery etc
software use xml document allow structure define document type definition dtd properly control number recursive definition entity dtd contain large number nest recursive entity lead explosive growth data parse cause denial service
security critical event occur software either record event omit important detail event logging security critical event log properly fail login attempt make malicious behavior difficult detect may hinder forensic analysis attack succeed
software log much information make log file hard process possibly hinder recovery effort forensic analysis attack log good practice general high level log appropriate debug stage development much log production environment might hinder system administrator ability detect anomalous condition provide cover attacker attempt penetrate system clutter audit trail forensic analysis make difficult debug problem production environment
program use expression operator precedence cause incorrect logic use often bug operator precedence logic error serious consequence use security critical code make authentication decision
software read write buffer use index pointer reference memory location prior begin buffer typically occur pointer index decremented position buffer pointer arithmetic result position begin valid memory location negative index use
software write data past end begin intend buffer typically result corruption data crash code execution software may modify index perform pointer arithmetic reference memory location outside boundary buffer subsequent write operation produce undefined unexpected result
software read write buffer use index pointer reference memory location end buffer typically occur pointer index decremented position buffer pointer arithmetic result position buffer negative index use generate position buffer
software receive data upstream component completely filter special element send downstream component
software receive data upstream component account special element specify location thereby miss remain special element may exist send downstream component filter might account instance special element occur relative marker e g begin end string second argument absolute position e g byte number may leave special element data match filter position still may dangerous
software contain hard cod credential password cryptographic key use inbound authentication outbound communication external component encryption internal data hard cod credential typically create significant hole allow attacker bypass authentication configure software administrator hole might difficult system administrator detect even detect difficult fix administrator may force disable product entirely two main variation inbound software contain authentication mechanism check input credential hard cod set credential outbound software connect another system component contain hard cod credential connect component inbound variant default administration account create simple password hard cod product associate account hard cod password installation product usually cannot change disable system administrator without manually modify program otherwise patch software password ever discover published common occurrence internet anybody knowledge password access product finally since installation software password even across different organization enable massive attack worm take place outbound variant applies front end system authenticate back end service back end service may require fix password easily discover programmer may simply hard code back end credential front end software user program may able extract password client side system hard cod password pose even threat since extraction password binary usually simple
software use captcha challenge challenge guess automatically recognize non human actor automate attacker could bypass intend protection captcha challenge perform action higher frequency humanly possible launch spam attack several different cause guessable captcha audio visual image sufficient distortion unobfuscated source image question generate format automatically recognize math question question number possible answer limit birth year favorite sport team general knowledge trivia question answer access use data base country capital popular actor data associate captcha may provide hint content image whose filename contain word use captcha
software use sequential operation read write buffer use incorrect length value cause access memory outside bound buffer length value exceed size destination buffer overflow could occur
software utilize share resource concurrent manner attempt synchronize access resource access share resource synchronize resource may state expect software might lead unexpected insecure behavior especially attacker influence share resource
software utilize share resource concurrent manner correctly synchronize access resource access share resource correctly synchronize resource may state expect software might lead unexpected insecure behavior especially attacker influence share resource
program obtain value untrusted source convert value pointer dereferences result pointer attacker supply pointer memory location program expect pointer dereferenced write operation attack might allow modification critical program state variables cause crash execute code dereferencing operation read attack might allow read sensitive data cause crash set program variable unexpected value since value read unexpected memory location several variant weakness include necessarily limit untrusted value directly invoke function call o kernels driver boundary userland privilege memory space untrusted pointer might enter api system call see cwe one example inadvertently accept value untrusted control sphere accept input might occur code originally develop run single user non network environment code port otherwise expose network environment
program perform pointer arithmetic valid pointer use offset point outside intend range valid memory location result pointer pointer contain reference arbitrary memory location program typically intend use pointer access limit portion memory contiguous memory use access individual array program may use offset order access field sub element store within structure data offset might range come untrusted source result incorrect calculation occur another error attacker control influence offset point outside intend boundary structure attacker may able read write memory location use elsewhere program result attack might change state software access program variables cause crash instable behavior possibly lead code execution
program access use pointer initialize pointer contain uninitialized value value might point valid memory location could cause program read write unexpected memory location lead denial service uninitialized pointer use function call arbitrary function could invoke attacker influence portion uninitialized memory contain pointer weakness could leverage execute code perform attack depend memory layout associate memory management behavior program operation attacker might able influence content uninitialized pointer thus gain fine grain control memory location access
program dereferences pointer contain location memory previously valid longer valid program release memory maintain pointer memory memory might allocate later time original pointer access read write data could cause program read modify data use different function process depend newly allocate memory use could lead denial service information exposure code execution
program release resource still intend use program another actor weakness focus error program release resource performs release anyway different weakness program release resource appropriate time maintain reference resource later access weakness resource still valid upon subsequent access program release resource still use possible operation still take resource may repurposed meantime lead issue similar cwe consequence may include denial service information exposure code execution
software define signal handler contain code sequence asynchronous safe e functionality reentrant interrupt lead unexpected system state variety potential consequence depend context include denial service code execution signal handler typically intend interrupt normal functionality program even signal order notify process event signal handler use global static variables invokes function ultimately depend state associate metadata could corrupt system state use normal functionality could subject program race condition weaknesses allow attacker cause program state corrupt denial service frequently consequence case weakness could leverage code execution several different scenario introduce issue invocation non reentrant function within handler one example malloc modify internal global variables manage memory function actually reentrant code sequence necessarily function call contain non atomic use global variables associate metadata structure access functionality program include signal handler frequently function register handle multiple signal signal handler function intend run one time instead invoke multiple time could happen repeat delivery signal delivery different signal handler function cwe note environment context might possible signal handler interrupt signal handler normal behavior software operate set state variables signal receive middle normal execution modification variables variables may incorrect corrupt state signal handler execution possibly still incorrect corrupt upon return
software import require include executable functionality library source outside intend control sphere include third party functionality web widget library source functionality software must effectively trust functionality without sufficient protection mechanism functionality could malicious nature either come untrusted source spoof modify transit trust source functionality might also contain weaknesses grant access additional functionality state information keep private base system system state information sensitive application data dom web application might lead many different consequence depend include functionality examples include injection malware information exposure grant excessive privilege permission untrusted functionality dom base xss vulnerability steal user cooky open redirect malware cwe
software define function use handler one signal sometimes intentional safe function use handle multiple signal race condition could occur function use state outside local declaration global variables non reentrant function side effect attacker could send one signal invokes handler function many os typically prevent signal invoke handler least handler function complete execution however attacker could send different signal associate handler function could interrupt original handler function still execute share state state could corrupt lead variety potential consequence depend context include denial service code execution another rarely explore possibility arise signal handler design execute send multiple signal attacker could invoke function may generate extra unintended side effect race condition might even necessary attacker could send one signal wait handle send signal
software attempt unlock resource lock depend lock functionality unlock non lock resource might cause memory corruption modification resource associate metadata use track lock
software contain multiple thread executable segment wait release necessary lock result deadlock
program contain iteration loop exit condition cannot reach e infinite loop loop influence attacker weakness could allow attacker consume excessive resource cpu memory
software record password hash data store receive hash password client compare supply hash hash obtain data store authentication mechanism rely client generate hash password possibly reduce load server avoid send password across network however client use generate hash attacker bypass authentication obtain copy hash e g use sql injection compromise database authentication credential exploit information exposure attacker could use modify client replay steal hash without knowledge original password result server side comparison client side hash provide security use password without hash
software require actor able perform action one unique action software enforce improperly enforces restriction various application user expect perform certain action vote request refund make purchase restriction enforce sometimes security implication example vote application attacker could attempt stuff ballot box vote multiple time vote count separately attacker could directly affect win vote could significant business impact depend purpose software
software use specifies encode generate output downstream component specify encode encode expect downstream component weakness cause downstream component use decode method produce different data software intend send wrong encode use even closely relate downstream component could decode data incorrectly security consequence provide boundary control data inadvertently break result data could introduce control character special element send software result data could use bypass protection mechanism input validation enable injection attack use output encode essential ensure communication component accurate use wrong encode even closely relate could cause downstream component misinterpret output example html entity encode use element html body web page however programmer might use entity encode generate output use within attribute html tag could contain functional javascript affect html encode web application receive attention problem weakness could potentially apply type software use communication stream could support multiple encoding
program check value ensure le equal maximum also verify value greater equal minimum program use sign integer float even value expect positive input validation check might assume value positive check maximum value value negative code assume value positive produce error error may security consequence negative value use memory allocation array access buffer access etc ultimately error could lead buffer overflow type memory corruption use negative number positive context could security implication type resource example shop cart might check user request item request item could cause application calculate negative price credit attacker account
software support session one behavior must perform actor properly ensure actor perform behavior require sequence perform action unexpected order omit step attacker could manipulate business logic software cause enter invalid state case also expose resultant weaknesses example file share protocol might require actor perform separate step provide username password able transfer file file share server accepts password command follow transfer command without username provide software might still perform transfer note different cwe focus software performs action wrong sequence entry closely relate focused ensure actor performs action correct sequence workflow relate behavior include step perform expect order require step omit step interrupt step perform timely fashion
software administrator place user incorrect group incorrect group access privilege intend group user might able bypass intend security policy access unexpected resource perform unexpected action access control system might able detect malicious usage group membership
program allocate initialize resource pointer object variable use one type later access resource use type incompatible original type program access resource use incompatible type could trigger logical error resource expect property languages without memory safety c c type confusion lead bound memory access weakness frequently associate union parse data many different embed object type c present application interpret variable memory location multiple way weakness unique c c example error php application trigger provide array parameter scalars expect vice versa languages perl perform automatic conversion variable one type access another type also contain issue
software use access resource initialize resource properly initialize software may behave unexpectedly may lead crash invalid memory access consequence vary depend type resource use within software
software initialize critical resource many resource require initialization properly use resource initialize could contain unpredictable expire data could initialize default invalid security implication resource expect certain property value
software use access file descriptor close file descriptor particular file device release reuse code might write original file since reuse file descriptor might reference different file device
software use reference count manage resource update incorrectly update reference count reference count use track many object contain reference particular resource memory management garbage collection reference count reach zero resource de allocate reuse object use reference count accidentally reach zero resource might release soon even though still use object longer use resource reference count zero resource might ever release
software properly restrict read write dynamically identify variables many languages offer powerful feature allow programmer access arbitrary variables specify input string feature offer significant flexibility reduce development time extremely dangerous attacker modify unintended variables security implication
software receive input upstream component specifies multiple attribute property field initialize update object properly control attribute modify object contain attribute intend internal use unexpected modification could lead vulnerability weakness sometimes know language specific mechanism make possible mass assignment autobinding object injection
software generate hash password use scheme provide sufficient level computational effort would make password crack attack infeasible expensive many password storage mechanism compute hash store hash instead store original password plaintext design authentication involve accept incoming password compute hash compare store hash many hash algorithm design execute quickly minimal overhead even cryptographic hash however efficiency problem password storage reduce attacker workload brute force password crack attacker obtain hash method sql injection database store hash attacker store hash offline use various technique crack password compute hash efficiently without build workload modern attack compute large number hash even exhaust entire space possible password within short amount time use massively parallel compute cloud compute gpu asic fpga hardware scenario efficient hash algorithm help attacker several property hash scheme relevant strength offline massively parallel attack amount cpu time require compute hash stretch amount memory require compute hash memory hard operation include random value along password input hash computation salt give hash know way determine input e g password produce hash value guess possible input one way hash relative number possible hash generate scheme low likelihood produce hash multiple different input collision resistance note security requirement software may vary depend environment value password different scheme might provide property yet may still provide sufficient security environment conversely solution might strong preserve one property still weak attack another property might able significantly reduce efficiency massively parallel attack
software construct part expression language el statement java server page jsp use externally influence input upstream component neutralize incorrectly neutralize special element could modify intend el statement execute
software operate environment power limit resource cannot automatically replenish software properly restrict amount power operation consume environment embed mobile device power limit resource battery cannot automatically replenish software device might always directly attach reliable power source software use much power quickly could cause device subsequently software stop function power restore increase financial burden device owner increase power cost normal operation application consume power however case attacker could cause application consume power intend use component display cpu disk gps sound microphone usb interface
software store sensitive information file system device build access control many modern file system device utilize form access control order restrict access data storage mechanism capability example memory card floppy disk cd usb device typically make accessible user within system become problem sensitive data store mechanism multi user environment anybody system read write data android device external storage typically globally readable writable application device external storage may also easily accessible mobile device usb connection physically accessible device memory card port
software establish communication channel endpoint receive message endpoint sufficiently ensure message modify transmission attacker might able modify message spoof endpoint interfere data cross network redirect connection system control
software use handler custom url scheme properly restrict actor invoke handler use scheme mobile platform architecture allow use custom url scheme facilitate communication application case io method inter application communication implementation developer discretion may open security flaw application example could potentially dangerous functionality modify file custom url scheme
software establish communication channel handle incoming request initiate actor properly verify request come expect origin attacker successfully establish communication channel untrusted origin attacker may able gain privilege access unexpected functionality
software create communication channel initiate outgo request actor correctly specify intend destination actor attacker destination may able spoof trust server steal data cause denial service least two distinct weaknesses cause software communicate unintended destination software allow attacker control destination specify attacker cause connect untrusted malicious destination example udp connectionless protocol udp packet spoof specify false source address packet server receive packet send reply specify destination use source incoming packet e false source server trick send traffic wrong host effective hiding real source attack conduct distribute denial service ddos another example server side request forgery ssrf xml external entity xxe use trick server make outgo request host cannot directly access attacker due firewall restriction software incorrectly specify destination attacker control destination might able spoof trust server common occurrence likely due misconfiguration administrator resultant weaknesses example software might incorrectly parse e mail ip address send sensitive data unintended destination another example android application may use sticky broadcast communicate receiver particular application since sticky broadcast process receiver allow malicious application access restrict data intend different application
software display information identifier user display mechanism make easy user distinguish visually similar identical glyph homoglyphs may cause user misinterpret glyph perform unintended insecure action glyph picture icon semantically distinct program appear similar identical human user refer homoglyphs example lowercase l ell uppercase eye different character code character display exactly way user depend font also occur different character set example latin capital letter greek capital letter alpha treat distinct program may display exactly way user accent mark may also cause letter appear similar latin capital letter grave mark equivalent acute accent adversary exploit visual similarity attack phishing e g provide link attacker control hostname look like hostname victim trust different use homoglyphs adversary may create back door username visually similar username regular user make difficult system administrator detect malicious username review log
web application restrict incorrectly restrict frame object ui layer belong another application domain lead user confusion interface user interacting web application expect place restriction whether allow render within frame iframes object embed applet element without restriction user trick interact application intending
software perform comparison two entity entity different incompatible type cannot guarantee provide correct result directly compare languages strictly type support cast conversion c c programmer might assume cast one entity type another entity ensure comparison perform correctly cannot guarantee languages strictly type php javascript may implicit cast conversion type programmer unaware cause unexpected result example string might convert number type see examples
code perform comparison two entity comparison examines wrong factor characteristic entity lead incorrect result resultant weaknesses lead incorrect result resultant weaknesses example code might inadvertently compare reference object instead relevant content object cause two equal object consider unequal
developer build security critical protection mechanism software processor optimize execution program mechanism remove modify
software multiple function methods procedure macros etc contain code issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability example two copy code programmer might fix weakness one copy forget fix weakness another copy
software use data element excessively large number sub element non primitive data type structure aggregate object issue make software perform slowly relevant code reachable attacker performance problem might introduce vulnerability interpretation excessively large may vary product developer cisq recommend default sub element
software architecture contain many horizontal layer issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability interpretation expect range may vary product developer cisq recommend default minimum layer maximum layer
parent class virtual destructor method parent child class virtual destructor issue prevent software run reliably since child might perform essential destruction operation relevant code reachable attacker reliability problem might introduce vulnerability memory leak cwe
software create immutable text string use string concatenation operation build string via loop feature e g loop use append exist string result creation new object iteration program pattern inefficient comparison use text buffer data element issue make software perform slowly relevant code reachable attacker could influence create performance problem
software contain modules one module reference cycle back e circular dependency example java weakness might indicate cycle package issue make difficult maintain software due insufficient modularity indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability issue prevent software run reliably relevant code reachable attacker reliability problem might introduce vulnerability
code contain callable control element contain excessively large number reference application object external context callable e fan value excessively large interpretation excessively large fan value may vary product developer cisq recommend default referenced object issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
software perform data query large number join sub query large data table issue make software perform slowly relevant code reachable attacker performance problem might introduce vulnerability interpretation large data table large number join sub query may vary product developer cisq recommend default million row large data table default minimum join default minimum sub query
software loop body loop condition contain control element directly indirectly consume platform resource e g messaging session lock file descriptor issue make software perform slowly attacker influence number iteration loop performance problem might allow denial service consume platform resource intend
software initialize data use hard cod value act network resource identifier issue prevent software run reliably e g run environment use hard cod network resource identifier relevant code reachable attacker reliability problem might introduce vulnerability
software initialize data element use hard cod literal simple integer static constant element issue make difficult modify maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
product documentation represent design issue make difficult understand maintain product make difficult time consume detect fix vulnerability
code one architectural layer invokes code resides deeper layer adjacent layer e invocation skip least one layer invoke code part vertical utility layer reference horizontal layer issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
software contain class inheritance one concrete class issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
name callable method control element signature support variable variadic number parameter argument issue prevent software run reliably relevant code reachable attacker reliability problem might introduce vulnerability variadic argument difficult inefficient manual analysis certain function method invoke
software use dedicated central data manager component require design contain code perform data access operation use data manager issue make software perform slowly intend since intend central data manager may explicitly optimize performance quality characteristic relevant code reachable attacker performance problem might introduce vulnerability
code contain function method operate multi thread environment own unsafe non final static storable member data element issue prevent software run reliably relevant code reachable attacker reliability problem might introduce vulnerability
software perform many data query without use efficient data process functionality store procedure issue make software perform slowly due computational expense relevant code reachable attacker performance problem might introduce vulnerability interpretation many data query may vary product developer cisq recommend default maximum data query inefficient function procedure
code parent class contain reference child class methods member issue prevent software run reliably relevant code reachable attacker reliability problem might introduce vulnerability
static code block create instance class pattern identifies situation storable data element member data element initialize value block code declare static issue make software perform slowly perform initialization need relevant code reachable attacker performance problem might introduce vulnerability
software contain function subroutine method whose signature unnecessarily large number parameter argument issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability interpretation large number parameter may vary product developer cisq recommend default maximum parameter argument
application use deploy component application server also use low level function methods management resource instead api provide application server issue prevent software run reliably relevant code reachable attacker reliability problem might introduce vulnerability
software contain serializable data element associate serialization method issue prevent software run reliably e g trigger exception relevant code reachable attacker reliability problem might introduce vulnerability examples serializable nature data element come serializable serializableattribute attribute net inheritance java io serializable interface java
software contain data query sql table view configure way utilize index may cause sequential search perform issue make software perform slowly relevant code reachable attacker performance problem might introduce vulnerability
implementation product consistent design describe within relevant documentation issue make difficult maintain software due inconsistency indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
invokable code block contain exception handle block contain code e empty exception handle block catch finally block use block empty prevent software run reliably relevant code reachable attacker reliability problem might introduce vulnerability
software contain serializable storable data element field member data element contain member element serializable issue prevent software run reliably relevant code reachable attacker reliability problem might introduce vulnerability examples serializable nature data element come serializable serializableattribute attribute net inheritance java io serializable interface java
source code contain block contain code e block empty empty code block occur body conditionals function method definition exception handler etc empty code block might intentional might also indicate incomplete implementation accidental code deletion unexpected macro expansion etc program languages construct empty block might allow syntax lack behavior within block might violate convention api way error
software access data resource database without use connection pooling capability issue make software perform slowly connection pool allow connection reuse without overhead time consumption open close new connection relevant code reachable attacker performance problem might introduce vulnerability
software contain client function method contain large number data access query send data manager e use efficient database capability issue make software perform slowly relevant code reachable attacker performance problem might introduce vulnerability interpretation large number data access query may vary product developer cisq recommend default maximum data access per function method
class inheritance level high e large number parent class issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability interpretation large number parent class may vary product developer cisq recommend default maximum parent class
software perform unconditional control transfer goto code outside branch structure switch block issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
code perform comparison equality test two float float point value use comparison operator account possibility loss precision numeric calculation use float point value generate imprecise result round error result two different calculation might generate number mathematically equal slightly different bit representation translate mathematically equal value result equality test comparison might produce unexpected result issue prevent software run reliably relevant code reachable attacker reliability problem might introduce vulnerability
parent class contain one child class parent class virtual destructor method issue prevent software run reliably due undefined unexpected behavior relevant code reachable attacker reliability problem might introduce vulnerability
source code file many line code issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability interpretation many line code may vary product developer cisq recommend default threshold value
code contain class instance call method function delete destroy example c delete cause object delete issue prevent software run reliably relevant code reachable attacker reliability problem might introduce vulnerability
software intend manage data access particular data manager component relational non sql database contain code perform data access operation without use component software data access component design may intend handle data access operation component data access operation perform outside component may indicate violation intend design issue prevent software run reliably relevant code reachable attacker reliability problem might introduce vulnerability
function method contain many operation utilize data manager file resource issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability interpretation many operation may vary product developer cisq recommend default maximum operation data manager file
function method procedure etc contain excessive amount code comment within body issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability interpretation excessive volume may vary product developer cisq recommend default threshold comment code
class contain unnecessarily large number child issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability interpretation large number child may vary product developer cisq recommend default maximum child class
class contain virtual method method associate virtual destructor issue prevent software run reliably e g due undefined behavior relevant code reachable attacker reliability problem might introduce vulnerability
code synchronous call remote resource timeout call timeout set infinite issue prevent software run reliably since outage remote resource cause software hang relevant code reachable attacker reliability problem might introduce vulnerability
software use large data table contain excessively large number index issue make software perform slowly relevant code reachable attacker performance problem might introduce vulnerability interpretation large data table excessively large number index may vary product developer cisq recommend default threshold row large table default threshold index
method class perform operation directly access member element another class issue suggest poor encapsulation make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
software contain method access object later invoke element associate finalize destructor method issue make software perform slowly retain memory resource longer necessary relevant code reachable attacker performance problem might introduce vulnerability
software use control element across multiple architectural layer issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
software contain index range scan large data table scan cover large number row issue make software perform slowly relevant code reachable attacker performance problem might introduce vulnerability interpretation large data table excessive index range may vary product developer cisq recommend threshold table row threshold index range
software use loop control flow condition base value update within body loop issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
software use storable data element associate function methods necessary support comparison example java class make persistent require hashcode equal method define issue prevent software run reliably due incorrect unexpected comparison result relevant code reachable attacker reliability problem might introduce vulnerability
code contain data element pointer associate copy constructor method issue prevent software run reliably relevant code reachable attacker reliability problem might introduce vulnerability
product code documentation artifact consistently use naming convention variables callables group related callables capability data type file name similar type element issue make difficult understand maintain software due inconsistency indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
product code isolate system dependent functionality separate standalone modules issue make difficult maintain port software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
product use automatically generate code cannot execute without specific runtime support component issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
code use data representation relies low level data representation construct may vary across different processor physical machine oses physical component issue make difficult maintain port software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
product relies third party software component provide equivalent functionality across desirable platform issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
product relies third party component actively support maintain original developer trust proxy original developer reliance component longer maintain make difficult impossible fix significant bug vulnerability quality issue effect unmaintained code become obsolete issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
product code use machine dependent functionality sufficiently encapsulate isolate functionality rest code issue make difficult port maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
source code use literal constant may need change evolve time instead use symbolic constant issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
source code use symbolic constant sufficiently place definition constant centralize isolated location issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
code structure way relies much use set global variables throughout various point code instead preserve associate information narrower local context issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
code contain callable block code element variable use control one unique task store one instance data use variable multiple purpose make difficult person read understand code potentially hiding quality issue issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
product design documentation adequately describe control flow data flow system initialization relationship task component rationale important aspect design
product documentation adequately define input output system software interface
document fully define mechanism use control influence product specific program execute include environmental variables configuration file registry key command line switch option system setting
source code use comment style format inconsistent follow expect standard product issue make difficult maintain software due insufficient legibility indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
source code contain whitespace inconsistent across code follow expect standard product issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
source code contain element source file consistently provide prologue header standardize project lack prologue make difficult accurately quickly understand associate code standard prologue header may contain information module name version number author date purpose function assumption limitation accuracy consideration etc issue make difficult maintain software due insufficient analyzability indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
source code contain comment accurately describe explain aspect portion code comment associate comment accurately reflect associate code element introduce confusion reviewer due inconsistency make difficult le efficient validate code implement intend behavior correctly issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
code contain function method whose signature associate inline documentation sufficiently describe callable input output side effect assumption return code issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
documentation sufficiently describe technique use error handle exception process similar mechanism documentation may need cover error handle technique multiple layer module executable compilable code unit callable
code use many unconditional branch goto issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
code contain mccabe cyclomatic complexity exceed desirable maximum issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
code structure way halstead complexity measure exceed desirable maximum variety halstead complexity measure exist program vocabulary size volume issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
product use much self modify code issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
code contain callable code group nest branch deep issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
product attack surface whose quantitative measurement exceed desirable maximum originate software security attack surface measure typically reflect number input point output point utilized untrusted party e potential attacker larger attack surface provide place attack opportunity developer introduce weaknesses case measure may reflect aspect quality besides security e g product many input output may require large number test order improve code coverage
source code declare variable one scope variable use within narrower scope issue make difficult understand maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
code compile without sufficient warning enable may prevent detection subtle bug quality issue issue make difficult maintain software indirectly affect security make difficult time consume find fix vulnerability also might make easier introduce vulnerability
application use incorrectly use input validation framework provide source language independent library many modern cod languages provide developer input validation frameworks make task input validation easier le error prone frameworks automatically check input specify criterion direct execution error handler invalid input receive improper use e incorrect implementation miss altogether frameworks directly exploitable lead exploitable condition proper input validation perform later application use provide input validation frameworks also hurt maintainability code future developer may recognize downstream input validation use place validation framework
software initialize set resource default intend change administrator default secure developer often choose default value leave software open easy use possible box assumption administrator change default value however ease use come cost default insecure administrator change
product implement access control via policy feature intention disable restrict access read write asset system untrusted agent however implement access control lack require granularity render control policy broad allow access unauthorized agent security sensitive asset integrate circuit hardware engine expose access asset device configuration key etc trust firmware software module commonly set bios bootloader access typically access control upon power reset hardware system usually start default value register trust firmware boot firmware configure necessary access control protection common weakness exist protection scheme access control policy granular enough condition allow agent beyond trust agent access asset could lead loss functionality ability set device securely result security risk leak sensitive key material modification device configuration
product prevents direct access resource contain sensitive information sufficiently limit access metadata derive original sensitive information developer might correctly prevent unauthorized access database resource contain sensitive information might consider portion original information might also record metadata search index statistical report resource resource also restrict attacker might able extract original information otherwise infer detail example attacker could specify search term know unique particular person view metadata activity creation date order identify usage pattern
code use boxed primitive may introduce inefficiency performance critical operation languages java c support automatic conversion respective compiler primitive type object correspond wrapper class vice versa example compiler might convert int integer call autoboxing integer int call unboxing eliminates force programmer perform conversion manually make code cleaner however feature come cost performance lead resource exhaustion impact availability use generic collection therefore use scientific compute performance critical operation suit support impedance mismatch reference type primitive
software save user provide information comma separate value csv file neutralize incorrectly neutralize special element could interpret command file open spreadsheet software user provide data often save traditional database data export csv file allow user read data use spreadsheet software excel number calc software interprets entries begin formula execute spreadsheet software software formula language often allow method access hyperlink local command line frequently allow enough character invoke entire script attacker populate data field save csv file may attempt information exfiltration malicious activity automatically execute spreadsheet software
fulfill need cryptographic primitive product implement cryptographic algorithm use non standard unproven disallow non compliant cryptographic implementation cryptographic protocol system depend cryptographic primitive associate algorithm basic build block common examples primitive digital signature one way hash function cipher public key cryptography however notion primitive vary depend point view see terminology note explanation concept cryptographic primitive define accomplish one specific task precisely define mathematically reliable fashion example suppose specific cryptographic primitive encryption routine consensus primitive break try n different input larger value n stronger cryptography encryption scheme like aes one would expect n large infeasible execute reasonable amount time vulnerability ever find show one break cryptographic primitive significantly le expect number attempt primitive consider weaken sometimes extreme case colloquially break result anything use cryptographic primitive would consider insecure risky thus even break weaken seemingly small cryptographic primitive potential render whole system vulnerable due reliance primitive historical example find tl use des one would colloquially call des cryptographic primitive transport encryption version tl past des consider strong weaknesses find importantly des key length bit try n key consider impractical actor unfortunately attack system bit key practical via brute force make defeat des encryption practical practical adversary read information send version tl use information attack system result claim use tl weak system depend tl des could potentially render entire system vulnerable attack cryptographic primitive associate algorithm consider safe extensive research review experience cryptographer academia industry government entity look possible flaw furthermore cryptographic primitive associate algorithm frequently reevaluate safety new mathematical attack technique discover result time even well know cryptographic primitive lose compliance status discovery novel attack might either defeat algorithm reduce robustness significantly ad hoc cryptographic primitive implement almost certain implementation vulnerable attack well understood cryptographer result exposure sensitive information consequence weakness even difficult manage hardware implement deployment cryptographic algorithm first hardware patchable easily software flaw discover release production typically cannot fix without recall product secondly hardware product often expect work year time computation power available attacker increase therefore hardware implementation cryptographic primitive absolutely essential strong proven cryptographic primitive use
device use algorithm predictable generate pseudo random number
execution non reentrant code software perform call unintentionally produce nested invocation non reentrant code complex software single function call may lead many different possible code path may involve deeply nest call may difficult foresee possible code path could emanate give function call system external actor manipulate input system thereby achieve wide range possible control flow frequently concern software execute script untrusted source examples software web browser pdf reader weakness present one possible code path result function call alters program state original caller assume unchanged call
program process real number implementation number representation preserve require accuracy precision fractional part cause incorrect result security decision calculation require highly precise accurate number financial calculation price small variation number could exploit attacker multiple way store fractional part real number computer case limit accuracy record fraction fraction represent fix number digit binary decimal might enough digit assign represent number case number cannot represent fix number digit due repeat decimal binary notation e g due transcendental number round number lead situation computer result adequately match result sufficiently accurate math
